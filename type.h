//двоичное дерево поиска
//дублированные элементы в этом дереве не разрешены
#ifndef _TREE_H_
#define _TREE_H_
#include <stdbool.h>

//Переопределение типа Item подходящим образом
typedef struct word {
    char metWord[20];
    int count;
} Word;
typedef struct trnode {
    Word word;
    struct trnode * left;     //Указатель на левую ветвь
    struct trnode * right;    //Указатель на правую ветвь
} Trnode;
typedef struct tree {
    Trnode * root;    //Указатель на корень дерева
    int size;         //Количество элементов в дереве
} Tree;

/*Прототипы функций*/
/*Операция: инициализация дерева пустым содержимым
  Предусловие: ptree указывает на дерево
  Постусловие: дерево установлено в пустое состояние*/
void InitializeTree(Tree * wtree);

/*Операция: определение, является ли дерево пустым
  Предусловие: ptree указывает на дерево
  Постусловие: функция возвращает true, если дерево
               пустое, и false - в противном случае*/
bool TreeIsEmpty(const Tree * wtree);

/*Операция: определение количества элементов в дереве
  Предусловие: ptree указывает на дерево
  Постусловие: функция возвращает количество элементов в дереве*/
int TreeItemCount(const Tree * wtree);

/*Операция: добавление элемента к дереву
  Предусловие: pi - адрес добавляемого элемента
               ptree указывает на инициализировнное дерево
  Постусловие: если возможно, функция добавляет элемент
               к дереву и возвращает true;
               в противном случае она возвращает false*/
bool AddItem(Word * wi, Tree * wtree);

/*Операция: поиск элемента в дереве
  Предусловие: pi указывает на элемент
               ptree указывает на инициализированное дерево
  Постусловие: функция возвращает true, если элемент присутствует
               в дереве, и false - в противном случае*/
bool InTree(Word * wi, const Tree * wtree);

/*Операция: применение указанной функции к каждому элементу в дереве
  Предусловие: ptree указывает на дерево
               pfun указывает на функцию, которая принимает
               аргумент Item и не имеет возвращаемого значения
  Постусловие: функция, указанная с помощью pfun, выполняется один раз
               для каждого элемента в дереве*/
void Traverse(const Tree * wtree, void (* wfun)(Word word));

/*Операция: удаление всех элементов из дерева
  Предусловие: ptree указывает на инициализированное дерево
  Постусловие: дерево является пустым*/
void DeleteAll(Tree * wtree);

#endif